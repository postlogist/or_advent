reset;
option solver scipa;
param mip_gap := 0.01;
param time_limit := 1800;
option scip_options ("mipgap=" & mip_gap & " acc:_expr=1 outlev=1 timing=1 outlev-native=3 time_limit=" & time_limit);
#option highs_options ("alg:start=1 threads=8 timing=1 pre:solve=off outlev=1 miploglev=2 parallel=on  mip_rel_gap=" & mip_gap & " time_limit=" & time_limit );
option highs_options ("cvt:prod=7 threads=8 timing=1 outlev=1 miploglev=2 parallel=on  mip_rel_gap=" & mip_gap & " time_limit=" & time_limit );
#option highs_options ("threads=8 timing=1 outlev=1 miploglev=2 parallel=on  mip_rel_gap=" & mip_gap & " time_limit=" & time_limit );
option cplex_options ("mipgap=" & mip_gap & " display=1 timing=1 mipdisplay=3 timelimit="& time_limit);

option gcg_options ("gap=" & mip_gap & " outlev=1 timing=1 outlev-native=3 benders-enabled=1 mode=1 time_limit=" & time_limit);

option show_stats 1;

model Day20/day20.mod;
param instance symbolic := "Day20/instance.txt";
param solution symbolic := "Day20/solution.txt";

read n < (instance);
param best_known;
read  best_known < (instance);

for {i1 in FACILITIES, i2 in FACILITIES} {
        read flow[i1, i2] < (instance);
}

for {j1 in LOCATIONS, j2 in LOCATIONS} {
        read distance[j1, j2] < (instance);
}


solve;

display TotalDistance;

printf "Solving instance: %s\n\n", (instance) > (solution); 
printf "Total Distance: %d\n", TotalDistance >> (solution);

printf "Assignments:\n" >> (solution);

for {i in FACILITIES, j in LOCATIONS: assign[i, j] > 0.1} {
    printf "Facility %d: location %d\n", i, j  >> (solution);
}

