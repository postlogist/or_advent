reset;
option solver highsa;
param mip_gap := 0.01;
param time_limit := 1000;
option scip_options ("mipgap=" & mip_gap & " outlev=1 timing=1 outlev-native=3 time_limit=" & time_limit);
#option highs_options ("alg:start=1 threads=8 timing=1 pre:solve=off outlev=1 miploglev=2 parallel=on  mip_rel_gap=" & mip_gap & " time_limit=" & time_limit );
option highs_options ("alg:start=1 threads=8 timing=1 outlev=1 miploglev=2 parallel=on  mip_rel_gap=" & mip_gap & " time_limit=" & time_limit );
option cplex_options ("mipgap=" & mip_gap & " display=1 timing=1 mipdisplay=3 timelimit="& time_limit);

option gcg_options ("gap=" & mip_gap & " outlev=1 timing=1 outlev-native=3 benders-enabled=1 mode=1 time_limit=" & time_limit);

option show_stats 1;

model Day19/day19.mod;
param instance_name symbolic := "car1";
param instance symbolic := "Day19/instance_" & instance_name & ".txt";
param solution symbolic := "Day19/solution_" & instance_name & ".txt";

read n_jobs < (instance);
read n_stages < (instance);



param dummy;
for {j in JOBS} {
    for {s in STAGES} {
        read dummy < (instance);
        read p[j, s] < (instance);
    }
}


solve;

display makespan;

printf "Solving instance: %s\n\n", (instance_name) > (solution); 
printf "Makespan: %d\n", Makespan >> (solution);

printf "Job schedule (job, stage, start, end):\n" >> (solution);

for {j in JOBS} {
    for {s in STAGES} {
        printf "%d %d %d %d\n", j, s, start_time[j, s], end_time[j, s] >> (solution);
    }
};

