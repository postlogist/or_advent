reset;
option solver highsa;
param mip_gap := 0.01;
param time_limit := 180;
option scip_options ("mipgap=" & mip_gap & " outlev=1 timing=1 outlev-native=3 time_limit=" & time_limit);
#option highs_options ("threads=8 timing=1 outlev=1 miploglev=2 parallel=on  mip_rel_gap=" & mip_gap & " time_limit=" & time_limit );
option highs_options ("threads=8 parallel=on  mip_rel_gap=" & mip_gap & " time_limit=" & time_limit );
option show_stats 0;


param num_problems;
param num_items;
param problem_id symbolic;
param min_bins; # best known number of bins

model Day8/knapsack.mod;

read num_problems < Day8/instance_clean.txt;

printf "Solving %d bin packing problems\n", num_problems > Day8/solution_knapsack.txt;

param bins_required default 0;




for {prob in 1..num_problems}{    
    reset data;#num_items, BINS, ITEMS, item_size, bin_size;
    read problem_id < Day8/instance_clean.txt;
    printf "\n\n\nSolving problem instance %s... ", problem_id;
    printf "Solving problem instance %s... ", problem_id >> Day8/solution_knapsack.txt;
    read bin_size < Day8/instance_clean.txt;
    read num_items < Day8/instance_clean.txt;
    read min_bins < Day8/instance_clean.txt;
    read {i in ALL_ITEMS} item_size[i] < Day8/instance_clean.txt;

    

    repeat while sum{i in ALL_ITEMS} packed[i] < num_items-0.5 {        
        let ITEMS := setof {i in ALL_ITEMS: packed[i] < 0.5} i;
        printf "Items to pack: %d\n", card(ITEMS) >> Day8/solution_knapsack.txt;
        solve;
        for {i in ITEMS} {
            let packed[i] := put[i];
        }
        let bins_required := bins_required + 1;
        printf "Bin %d: %d items, %d capacity\n", bins_required, sum{i in ITEMS} put[i], UsedSpace >> Day8/solution_knapsack.txt;

    }
    printf "Total bins required: %d\n", bins_required >> Day8/solution_knapsack.txt;
    printf "Instance: %s, bins required: %d (%d)\n", problem_id, bins_required, min_bins > Day8/solution_knapsack_short.txt;
}  

*/